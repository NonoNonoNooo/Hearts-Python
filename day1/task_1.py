# написати функцію якам приймає рядок і повертає словник у якому
# ключами є всі символи, які зустрічаються в цьому рядку, а значення - відповідні
# вірогідності зустріти цей символ в цьому рядку.
# № код повинен бути структурований за допомогою конструкції if name == "__main__":,
# всі аргументи і значення що функція повертає повинні бути типізовані, функція має рядок документації


def probability_meeting_symbol(string: str) -> dict:
    """
    :param string: str
    :return: dict
    """
    # У змінну 'size' типу 'int' записуємо довжину рядка 'string',
    # це і буде сумарна кількість символів в рядку.
    size: int = len(string)

    # За допомогою такої конструкції ми створюємо словник, ключем якого є символ,
    # а значенням - його шанс зустрітися в рядку, округлений до 2 знаків після коми.
    ans: dict = {i: round(string.count(i) / size * 100, 2) for i in set(string)}

    return ans


if __name__ == "__main__":
    # Порожній рядок
    print(probability_meeting_symbol(""))  # Повинно повернути {}

    # Рядок з унікальними символами
    print(
        probability_meeting_symbol("Hello")
    )  # Повинно повернути {'o': 20.0, 'e': 20.0, 'H': 20.0, 'l': 40.0}

    # Рядок з повторюваними символами
    print(
        probability_meeting_symbol("abracadabra")
    )  # Повинно повернути {'a': 40.0, 'b': 10.0, 'r': 20.0, 'd': 10.0, 'c': 10.0}
